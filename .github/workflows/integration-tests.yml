name: Integration Tests

on:
  push:
    branches: [ main, master, develop ]
  pull_request:
    branches: [ main, master, develop ]

jobs:
  integration-tests:
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Set up Go
      uses: actions/setup-go@v4
      with:
        go-version: '1.21'
        
    - name: Cache Go modules
      uses: actions/cache@v3
      with:
        path: ~/go/pkg/mod
        key: ${{ runner.os }}-go-${{ hashFiles('**/go.sum') }}
        restore-keys: |
          ${{ runner.os }}-go-
          
    - name: Download dependencies
      run: go mod download
      
    - name: Run basic integration tests
      run: |
        echo "Running basic functionality tests..."
        go test -v -timeout=30s -run "TestBasicSetAndGet|TestGetNonExistentKey|TestOverwriteKey|TestMultipleKeysAndValues" ./integration_simple_test.go
        
    - name: Run concurrency tests
      run: |
        echo "Running concurrency tests..."
        go test -v -timeout=30s -run "TestConcurrentClients" ./integration_simple_test.go
        
    - name: Run concurrent read/write tests
      run: |
        echo "Running concurrent read/write tests..."
        go test -v -timeout=30s -run "TestConcurrentReadWrite" ./integration_simple_test.go
        
    - name: Run performance tests
      run: |
        echo "Running performance tests..."
        go test -v -timeout=30s -run "TestPerformanceMetrics" ./integration_simple_test.go
        
    - name: Run benchmarks
      run: |
        echo "Running benchmarks..."
        go test -bench=BenchmarkSingleClientOperations -benchtime=3s ./benchmark_test.go
        go test -bench=BenchmarkConcurrentClients -benchtime=3s ./benchmark_test.go

  docker-tests:
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Build Docker image
      run: docker build -t toy-redis .
      
    - name: Test Docker container
      run: |
        # Start container in background
        docker run -d -p 6379:6379 --name toy-redis-test toy-redis
        
        # Wait for container to start
        sleep 5
        
        # Test basic functionality with netcat
        echo "Testing Docker container..."
        echo "SET docker_test success" | nc localhost 6379
        response=$(echo "GET docker_test" | nc localhost 6379)
        
        if [ "$response" = "success" ]; then
          echo "✅ Docker container test passed"
        else
          echo "❌ Docker container test failed: got '$response'"
          exit 1
        fi
        
        # Cleanup
        docker stop toy-redis-test
        docker rm toy-redis-test

  load-tests:
    runs-on: ubuntu-latest
    needs: integration-tests
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Set up Go
      uses: actions/setup-go@v4
      with:
        go-version: '1.21'
        
    - name: Build and start server
      run: |
        # Build the server
        go build -o toy-redis-server ./server/
        
        # Start server in background
        ./toy-redis-server &
        SERVER_PID=$!
        echo "SERVER_PID=$SERVER_PID" >> $GITHUB_ENV
        
        # Wait for server to start
        sleep 3
        
    - name: Run light load test
      run: |
        echo "Running light load test..."
        
        # Simple load test with multiple concurrent connections
        for i in {1..10}; do
          (
            for j in {1..50}; do
              echo "SET load_test_${i}_${j} value_${i}_${j}" | nc localhost 6379 > /dev/null
              echo "GET load_test_${i}_${j}" | nc localhost 6379 > /dev/null
            done
          ) &
        done
        
        # Wait for all background jobs to complete
        wait
        
        echo "✅ Light load test completed"
        
    - name: Cleanup
      if: always()
      run: |
        if [ ! -z "$SERVER_PID" ]; then
          kill $SERVER_PID || true
        fi

  cross-platform-tests:
    strategy:
      matrix:
        os: [ubuntu-latest, macos-latest, windows-latest]
        go-version: ['1.20', '1.21']
        
    runs-on: ${{ matrix.os }}
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Set up Go
      uses: actions/setup-go@v4
      with:
        go-version: ${{ matrix.go-version }}
        
    - name: Download dependencies
      run: go mod download
      
    - name: Run basic tests (cross-platform)
      run: |
        go test -v -timeout=30s -run "TestBasicSetAndGet|TestGetNonExistentKey|TestOverwriteKey" ./integration_simple_test.go
        
    - name: Build server (cross-platform)
      run: |
        go build -o toy-redis-server${{ matrix.os == 'windows-latest' && '.exe' || '' }} ./server/
